{"version":3,"sources":["components/Cards/cards.js","components/Nav/navBar.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","react_default","a","createElement","className","style","width","onClick","handleClick","id","clicked","src","image","alt","NavBar","href","height","currentScore","highScore","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleImgClick","newArray","state","images","map","alreadyClicked","includes","alert","setState","concat","toConsumableArray","console","log","random","arr","sort","b","Math","_this2","navBar","cards","key","img","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAkBeA,EAbA,SAACC,GAAD,OAEZC,EAAAC,EAAAC,cAAA,WAECF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAACC,MAAO,MAEjCL,EAAAC,EAAAC,cAAA,OAAKI,QAAW,kBAAMP,EAAMQ,YAAYR,EAAMS,GAAIT,EAAMU,UAAUN,UAAU,eAAeO,IAAKX,EAAMY,MAAOC,IAAI,QCe1GC,EAxBA,SAACd,GAAD,OACRC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAEbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeW,KAAK,KAE/Bd,EAAAC,EAAAC,cAAA,OAAKQ,IAAI,6CAA6CL,MAAM,KAAKU,OAAO,KAAKZ,UAAU,2BAA2BS,IAAI,KAFxH,mBAIAZ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BAEZH,EAAAC,EAAAC,cAAA,oBAAYH,EAAMiB,cAElBhB,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMkB,sBCsFnBC,qBA7Fb,SAAAA,EAAanB,GAAO,IAAAoB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAElBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMvB,KAkBR2B,eAAiB,SAAClB,EAAIC,GAGpB,IAAMkB,EAAWR,EAAKS,MAAMC,OAAOC,IAAI,SAAAnB,GAErC,OAAOA,IAMLQ,EAAKS,MAAMG,eAAeC,SAASxB,GACrCyB,MAAM,qDAINd,EAAKe,SAAS,CAEZlB,aAAcG,EAAKS,MAAMZ,aAAe,EAExCa,OAAQF,EAERI,eAAc,GAAAI,OAAAf,OAAAgB,EAAA,EAAAhB,CAAMD,EAAKS,MAAMG,gBAAjB,CAAiCvB,MAKnD6B,QAAQC,IAAInB,EAAKS,MAAMG,iBA/CLZ,EAoDpBoB,OAAS,SAACC,GAER,OAAQA,EAAIC,KAAK,SAASxC,EAAGyC,GAAI,MAAO,GAAMC,KAAKJ,YAlDnDpB,EAAKS,MAAQ,CAEXC,SAEAZ,UAAW,EAEXD,aAAc,EAEde,eAAgB,IAZAZ,wEA0DX,IAAAyB,EAAAtB,KAEP,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAC2C,EAAD,CAAQ5B,UAAaK,KAAKM,MAAMX,UAAWD,aAAgBM,KAAKM,MAAMZ,eAEtEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAEdmB,KAAKiB,OAAOjB,KAAKM,MAAMC,QAAQC,IAAI,SAAAnB,GAAK,OACvCX,EAAAC,EAAAC,cAAC4C,EAAD,CACAC,IAAKpC,EAAMH,GAEXA,GAAIG,EAAMH,GAEVG,MAAOA,EAAMqC,IAEbvC,QAASE,EAAMF,QAEfF,YAAeqC,EAAKlB,4BA/EZuB,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.725ccbe0.chunk.js","sourcesContent":["import React from 'react';\n\n\n\n\nconst  Cards = (props) => \n\n  (<div>\n\n    <div className=\"card\" style={{width: 280}}>\n\n        <img onClick = {() => props.handleClick(props.id, props.clicked)} className=\"card-img-top\" src={props.image} alt=\"\"/>\n\n    </div>\n    \n        </div>\n    );\n\nexport default Cards;\n","import React from \"react\";\n\nconst NavBar = (props) =>\n      (<div className=\"App\">\n\n        <nav className=\"navbar navbar-dark bg-dark\">\n\n          <a className=\"navbar-brand\" href=\"/\">\n\n            <img src=\"/docs/4.0/assets/brand/bootstrap-solid.svg\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\"/>Clicky Game AME\n          </a>\n          <ul className=\"nav navbar-nav navbar-right\">\n\n            <li>Score: {props.currentScore}</li>\n\n            <li>Top Score: {props.highScore}</li>\n\n          </ul>\n\n        </nav>\n        \n      </div>)\n    \n  \n\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport Cards from \"./components/Cards/cards\";\nimport NavBar from \"./components/Nav/navBar\";\nimport images from \"./images.json\";\nimport \"./App.css\"\n\nclass App extends Component {\n\n  constructor (props) {\n\n    super(props)\n\n    this.state = {\n\n      images,\n\n      highScore: 0,\n\n      currentScore: 0,\n\n      alreadyClicked: []\n\n    }\n    \n  }\n\n  \n\n  handleImgClick = (id, clicked) => { \n\n    // changes boolean of img from false to true after click\n    const newArray = this.state.images.map(image => {\n  \n      return image\n    });\n    \n\n\n    // if clicked and img = false adds 1 to state then moves images around\n    if (this.state.alreadyClicked.includes(id)) {\n      alert(\"You already clicked that one, press OK to restart\")\n\n    } else {\n\n      this.setState({\n\n        currentScore: this.state.currentScore + 1,\n\n        images: newArray,\n\n        alreadyClicked: [...this.state.alreadyClicked, id]\n  \n      });\n    }\n\n    console.log(this.state.alreadyClicked);\n\n    \n  }\n\n  random = (arr)  => {\n\n    return (arr.sort(function(a, b) {return 0.5 - Math.random()}));\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n\n        <NavBar highScore = {this.state.highScore} currentScore = {this.state.currentScore} />\n\n        <div className=\"characterDiv\">\n        \n        {this.random(this.state.images).map(image => (\n          <Cards  \n          key={image.id}\n\n          id={image.id}\n\n          image={image.img}\n\n          clicked={image.clicked}\n\n          handleClick = {this.handleImgClick}\n          \n          />\n\n        ))}\n\n        </div>\n\n      </div>\n\n    );\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}